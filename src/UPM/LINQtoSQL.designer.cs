#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.431
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UPM
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="UPM")]
	public partial class LINQtoSQLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBranch(Branch instance);
    partial void UpdateBranch(Branch instance);
    partial void DeleteBranch(Branch instance);
    partial void InsertEducation_Degree(Education_Degree instance);
    partial void UpdateEducation_Degree(Education_Degree instance);
    partial void DeleteEducation_Degree(Education_Degree instance);
    partial void InsertProject_Student_Relation(Project_Student_Relation instance);
    partial void UpdateProject_Student_Relation(Project_Student_Relation instance);
    partial void DeleteProject_Student_Relation(Project_Student_Relation instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertProfessor(Professor instance);
    partial void UpdateProfessor(Professor instance);
    partial void DeleteProfessor(Professor instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    #endregion
		
		public LINQtoSQLDataContext() : 
				base(global::UPM.Properties.Settings.Default.UPMConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Branch> Branches
		{
			get
			{
				return this.GetTable<Branch>();
			}
		}
		
		public System.Data.Linq.Table<Education_Degree> Education_Degrees
		{
			get
			{
				return this.GetTable<Education_Degree>();
			}
		}
		
		public System.Data.Linq.Table<Project_Student_Relation> Project_Student_Relations
		{
			get
			{
				return this.GetTable<Project_Student_Relation>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Professor> Professors
		{
			get
			{
				return this.GetTable<Professor>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Branch")]
	public partial class Branch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Branch_Name;
		
		private EntitySet<Student> _Students;
		
		private EntitySet<Professor> _Professors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBranch_NameChanging(string value);
    partial void OnBranch_NameChanged();
    #endregion
		
		public Branch()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._Professors = new EntitySet<Professor>(new Action<Professor>(this.attach_Professors), new Action<Professor>(this.detach_Professors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Branch_Name
		{
			get
			{
				return this._Branch_Name;
			}
			set
			{
				if ((this._Branch_Name != value))
				{
					this.OnBranch_NameChanging(value);
					this.SendPropertyChanging();
					this._Branch_Name = value;
					this.SendPropertyChanged("Branch_Name");
					this.OnBranch_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Student", Storage="_Students", ThisKey="ID", OtherKey="Branch_ID")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Professor", Storage="_Professors", ThisKey="ID", OtherKey="Branch_ID")]
		public EntitySet<Professor> Professors
		{
			get
			{
				return this._Professors;
			}
			set
			{
				this._Professors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
		
		private void attach_Professors(Professor entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Professors(Professor entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Education_Degree")]
	public partial class Education_Degree : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _DegreeName;
		
		private EntitySet<Student> _Students;
		
		private EntitySet<Professor> _Professors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDegreeNameChanging(string value);
    partial void OnDegreeNameChanged();
    #endregion
		
		public Education_Degree()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._Professors = new EntitySet<Professor>(new Action<Professor>(this.attach_Professors), new Action<Professor>(this.detach_Professors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DegreeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DegreeName
		{
			get
			{
				return this._DegreeName;
			}
			set
			{
				if ((this._DegreeName != value))
				{
					this.OnDegreeNameChanging(value);
					this.SendPropertyChanging();
					this._DegreeName = value;
					this.SendPropertyChanged("DegreeName");
					this.OnDegreeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Education_Degree_Student", Storage="_Students", ThisKey="ID", OtherKey="Degree_ID")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Education_Degree_Professor", Storage="_Professors", ThisKey="ID", OtherKey="Degree_ID")]
		public EntitySet<Professor> Professors
		{
			get
			{
				return this._Professors;
			}
			set
			{
				this._Professors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Education_Degree = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Education_Degree = null;
		}
		
		private void attach_Professors(Professor entity)
		{
			this.SendPropertyChanging();
			entity.Education_Degree = this;
		}
		
		private void detach_Professors(Professor entity)
		{
			this.SendPropertyChanging();
			entity.Education_Degree = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project_Student_Relation")]
	public partial class Project_Student_Relation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Project_ID;
		
		private int _Student_ID;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProject_IDChanging(int value);
    partial void OnProject_IDChanged();
    partial void OnStudent_IDChanging(int value);
    partial void OnStudent_IDChanged();
    #endregion
		
		public Project_Student_Relation()
		{
			this._Student = default(EntityRef<Student>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Project_ID
		{
			get
			{
				return this._Project_ID;
			}
			set
			{
				if ((this._Project_ID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProject_IDChanging(value);
					this.SendPropertyChanging();
					this._Project_ID = value;
					this.SendPropertyChanged("Project_ID");
					this.OnProject_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Student_ID
		{
			get
			{
				return this._Student_ID;
			}
			set
			{
				if ((this._Student_ID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudent_IDChanging(value);
					this.SendPropertyChanging();
					this._Student_ID = value;
					this.SendPropertyChanged("Student_ID");
					this.OnStudent_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Project_Student_Relation", Storage="_Student", ThisKey="Student_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Project_Student_Relations.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Project_Student_Relations.Add(this);
						this._Student_ID = value.ID;
					}
					else
					{
						this._Student_ID = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Project_Student_Relation", Storage="_Project", ThisKey="Project_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Project_Student_Relations.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Project_Student_Relations.Add(this);
						this._Project_ID = value.ID;
					}
					else
					{
						this._Project_ID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private decimal _Student_Code;
		
		private int _Branch_ID;
		
		private int _Degree_ID;
		
		private string _Phone_No;
		
		private string _Email;
		
		private string _BirthDay;
		
		private decimal _Entry_Year;
		
		private bool _Entry_Term;
		
		private EntitySet<Project_Student_Relation> _Project_Student_Relations;
		
		private EntityRef<Branch> _Branch;
		
		private EntityRef<Education_Degree> _Education_Degree;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnStudent_CodeChanging(decimal value);
    partial void OnStudent_CodeChanged();
    partial void OnBranch_IDChanging(int value);
    partial void OnBranch_IDChanged();
    partial void OnDegree_IDChanging(int value);
    partial void OnDegree_IDChanged();
    partial void OnPhone_NoChanging(string value);
    partial void OnPhone_NoChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnBirthDayChanging(string value);
    partial void OnBirthDayChanged();
    partial void OnEntry_YearChanging(decimal value);
    partial void OnEntry_YearChanged();
    partial void OnEntry_TermChanging(bool value);
    partial void OnEntry_TermChanged();
    #endregion
		
		public Student()
		{
			this._Project_Student_Relations = new EntitySet<Project_Student_Relation>(new Action<Project_Student_Relation>(this.attach_Project_Student_Relations), new Action<Project_Student_Relation>(this.detach_Project_Student_Relations));
			this._Branch = default(EntityRef<Branch>);
			this._Education_Degree = default(EntityRef<Education_Degree>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_Code", DbType="Decimal(18,0) NOT NULL")]
		public decimal Student_Code
		{
			get
			{
				return this._Student_Code;
			}
			set
			{
				if ((this._Student_Code != value))
				{
					this.OnStudent_CodeChanging(value);
					this.SendPropertyChanging();
					this._Student_Code = value;
					this.SendPropertyChanged("Student_Code");
					this.OnStudent_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch_ID", DbType="Int NOT NULL")]
		public int Branch_ID
		{
			get
			{
				return this._Branch_ID;
			}
			set
			{
				if ((this._Branch_ID != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranch_IDChanging(value);
					this.SendPropertyChanging();
					this._Branch_ID = value;
					this.SendPropertyChanged("Branch_ID");
					this.OnBranch_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Degree_ID", DbType="Int NOT NULL")]
		public int Degree_ID
		{
			get
			{
				return this._Degree_ID;
			}
			set
			{
				if ((this._Degree_ID != value))
				{
					if (this._Education_Degree.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDegree_IDChanging(value);
					this.SendPropertyChanging();
					this._Degree_ID = value;
					this.SendPropertyChanged("Degree_ID");
					this.OnDegree_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone_No", DbType="NVarChar(20)")]
		public string Phone_No
		{
			get
			{
				return this._Phone_No;
			}
			set
			{
				if ((this._Phone_No != value))
				{
					this.OnPhone_NoChanging(value);
					this.SendPropertyChanging();
					this._Phone_No = value;
					this.SendPropertyChanged("Phone_No");
					this.OnPhone_NoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDay", DbType="NVarChar(10)")]
		public string BirthDay
		{
			get
			{
				return this._BirthDay;
			}
			set
			{
				if ((this._BirthDay != value))
				{
					this.OnBirthDayChanging(value);
					this.SendPropertyChanging();
					this._BirthDay = value;
					this.SendPropertyChanged("BirthDay");
					this.OnBirthDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_Year", DbType="Decimal(4,0) NOT NULL")]
		public decimal Entry_Year
		{
			get
			{
				return this._Entry_Year;
			}
			set
			{
				if ((this._Entry_Year != value))
				{
					this.OnEntry_YearChanging(value);
					this.SendPropertyChanging();
					this._Entry_Year = value;
					this.SendPropertyChanged("Entry_Year");
					this.OnEntry_YearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_Term", DbType="Bit NOT NULL")]
		public bool Entry_Term
		{
			get
			{
				return this._Entry_Term;
			}
			set
			{
				if ((this._Entry_Term != value))
				{
					this.OnEntry_TermChanging(value);
					this.SendPropertyChanging();
					this._Entry_Term = value;
					this.SendPropertyChanged("Entry_Term");
					this.OnEntry_TermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Project_Student_Relation", Storage="_Project_Student_Relations", ThisKey="ID", OtherKey="Student_ID")]
		public EntitySet<Project_Student_Relation> Project_Student_Relations
		{
			get
			{
				return this._Project_Student_Relations;
			}
			set
			{
				this._Project_Student_Relations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Student", Storage="_Branch", ThisKey="Branch_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._Branch_ID = value.ID;
					}
					else
					{
						this._Branch_ID = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Education_Degree_Student", Storage="_Education_Degree", ThisKey="Degree_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Education_Degree Education_Degree
		{
			get
			{
				return this._Education_Degree.Entity;
			}
			set
			{
				Education_Degree previousValue = this._Education_Degree.Entity;
				if (((previousValue != value) 
							|| (this._Education_Degree.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Education_Degree.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Education_Degree.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._Degree_ID = value.ID;
					}
					else
					{
						this._Degree_ID = default(int);
					}
					this.SendPropertyChanged("Education_Degree");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Project_Student_Relations(Project_Student_Relation entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Project_Student_Relations(Project_Student_Relation entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Professor")]
	public partial class Professor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _Degree_ID;
		
		private string _Email;
		
		private System.Nullable<decimal> _PhoneNo;
		
		private int _Branch_ID;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<Project> _Projects1;
		
		private EntitySet<Project> _Projects2;
		
		private EntitySet<Project> _Projects3;
		
		private EntityRef<Branch> _Branch;
		
		private EntityRef<Education_Degree> _Education_Degree;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDegree_IDChanging(int value);
    partial void OnDegree_IDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNoChanging(System.Nullable<decimal> value);
    partial void OnPhoneNoChanged();
    partial void OnBranch_IDChanging(int value);
    partial void OnBranch_IDChanged();
    #endregion
		
		public Professor()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Projects1 = new EntitySet<Project>(new Action<Project>(this.attach_Projects1), new Action<Project>(this.detach_Projects1));
			this._Projects2 = new EntitySet<Project>(new Action<Project>(this.attach_Projects2), new Action<Project>(this.detach_Projects2));
			this._Projects3 = new EntitySet<Project>(new Action<Project>(this.attach_Projects3), new Action<Project>(this.detach_Projects3));
			this._Branch = default(EntityRef<Branch>);
			this._Education_Degree = default(EntityRef<Education_Degree>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Degree_ID", DbType="Int NOT NULL")]
		public int Degree_ID
		{
			get
			{
				return this._Degree_ID;
			}
			set
			{
				if ((this._Degree_ID != value))
				{
					if (this._Education_Degree.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDegree_IDChanging(value);
					this.SendPropertyChanging();
					this._Degree_ID = value;
					this.SendPropertyChanged("Degree_ID");
					this.OnDegree_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNo", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> PhoneNo
		{
			get
			{
				return this._PhoneNo;
			}
			set
			{
				if ((this._PhoneNo != value))
				{
					this.OnPhoneNoChanging(value);
					this.SendPropertyChanging();
					this._PhoneNo = value;
					this.SendPropertyChanged("PhoneNo");
					this.OnPhoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch_ID", DbType="Int NOT NULL")]
		public int Branch_ID
		{
			get
			{
				return this._Branch_ID;
			}
			set
			{
				if ((this._Branch_ID != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranch_IDChanging(value);
					this.SendPropertyChanging();
					this._Branch_ID = value;
					this.SendPropertyChanged("Branch_ID");
					this.OnBranch_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Professor_Project", Storage="_Projects", ThisKey="ID", OtherKey="Guide_Professor_ID")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Professor_Project1", Storage="_Projects1", ThisKey="ID", OtherKey="Juror_Professor_ID")]
		public EntitySet<Project> Projects1
		{
			get
			{
				return this._Projects1;
			}
			set
			{
				this._Projects1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Professor_Project2", Storage="_Projects2", ThisKey="ID", OtherKey="Manager_Professor_ID")]
		public EntitySet<Project> Projects2
		{
			get
			{
				return this._Projects2;
			}
			set
			{
				this._Projects2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Professor_Project3", Storage="_Projects3", ThisKey="ID", OtherKey="Project_Professor_ID")]
		public EntitySet<Project> Projects3
		{
			get
			{
				return this._Projects3;
			}
			set
			{
				this._Projects3.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Professor", Storage="_Branch", ThisKey="Branch_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Professors.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Professors.Add(this);
						this._Branch_ID = value.ID;
					}
					else
					{
						this._Branch_ID = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Education_Degree_Professor", Storage="_Education_Degree", ThisKey="Degree_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Education_Degree Education_Degree
		{
			get
			{
				return this._Education_Degree.Entity;
			}
			set
			{
				Education_Degree previousValue = this._Education_Degree.Entity;
				if (((previousValue != value) 
							|| (this._Education_Degree.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Education_Degree.Entity = null;
						previousValue.Professors.Remove(this);
					}
					this._Education_Degree.Entity = value;
					if ((value != null))
					{
						value.Professors.Add(this);
						this._Degree_ID = value.ID;
					}
					else
					{
						this._Degree_ID = default(int);
					}
					this.SendPropertyChanged("Education_Degree");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.GuideProfessor = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.GuideProfessor = null;
		}
		
		private void attach_Projects1(Project entity)
		{
			this.SendPropertyChanging();
			entity.JurorProfessor = this;
		}
		
		private void detach_Projects1(Project entity)
		{
			this.SendPropertyChanging();
			entity.JurorProfessor = null;
		}
		
		private void attach_Projects2(Project entity)
		{
			this.SendPropertyChanging();
			entity.ManagerProfessor = this;
		}
		
		private void detach_Projects2(Project entity)
		{
			this.SendPropertyChanging();
			entity.ManagerProfessor = null;
		}
		
		private void attach_Projects3(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProjectProfessor = this;
		}
		
		private void detach_Projects3(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProjectProfessor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Project_Name;
		
		private string _ProposalText;
		
		private int _Project_Professor_ID;
		
		private int _Guide_Professor_ID;
		
		private int _Manager_Professor_ID;
		
		private System.Nullable<int> _Juror_Professor_ID;
		
		private string _Start_Date;
		
		private string _End_Date;
		
		private System.Nullable<double> _Guide_Grade;
		
		private System.Nullable<double> _Juror_Grade;
		
		private EntitySet<Project_Student_Relation> _Project_Student_Relations;
		
		private EntityRef<Professor> _Professor;
		
		private EntityRef<Professor> _Professor1;
		
		private EntityRef<Professor> _Professor2;
		
		private EntityRef<Professor> _Professor3;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProject_NameChanging(string value);
    partial void OnProject_NameChanged();
    partial void OnProposalTextChanging(string value);
    partial void OnProposalTextChanged();
    partial void OnProject_Professor_IDChanging(int value);
    partial void OnProject_Professor_IDChanged();
    partial void OnGuide_Professor_IDChanging(int value);
    partial void OnGuide_Professor_IDChanged();
    partial void OnManager_Professor_IDChanging(int value);
    partial void OnManager_Professor_IDChanged();
    partial void OnJuror_Professor_IDChanging(System.Nullable<int> value);
    partial void OnJuror_Professor_IDChanged();
    partial void OnStart_DateChanging(string value);
    partial void OnStart_DateChanged();
    partial void OnEnd_DateChanging(string value);
    partial void OnEnd_DateChanged();
    partial void OnGuide_GradeChanging(System.Nullable<double> value);
    partial void OnGuide_GradeChanged();
    partial void OnJuror_GradeChanging(System.Nullable<double> value);
    partial void OnJuror_GradeChanged();
    #endregion
		
		public Project()
		{
			this._Project_Student_Relations = new EntitySet<Project_Student_Relation>(new Action<Project_Student_Relation>(this.attach_Project_Student_Relations), new Action<Project_Student_Relation>(this.detach_Project_Student_Relations));
			this._Professor = default(EntityRef<Professor>);
			this._Professor1 = default(EntityRef<Professor>);
			this._Professor2 = default(EntityRef<Professor>);
			this._Professor3 = default(EntityRef<Professor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Project_Name
		{
			get
			{
				return this._Project_Name;
			}
			set
			{
				if ((this._Project_Name != value))
				{
					this.OnProject_NameChanging(value);
					this.SendPropertyChanging();
					this._Project_Name = value;
					this.SendPropertyChanged("Project_Name");
					this.OnProject_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProposalText", DbType="NVarChar(MAX)")]
		public string ProposalText
		{
			get
			{
				return this._ProposalText;
			}
			set
			{
				if ((this._ProposalText != value))
				{
					this.OnProposalTextChanging(value);
					this.SendPropertyChanging();
					this._ProposalText = value;
					this.SendPropertyChanged("ProposalText");
					this.OnProposalTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project_Professor_ID", DbType="Int NOT NULL")]
		public int Project_Professor_ID
		{
			get
			{
				return this._Project_Professor_ID;
			}
			set
			{
				if ((this._Project_Professor_ID != value))
				{
					if (this._Professor3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProject_Professor_IDChanging(value);
					this.SendPropertyChanging();
					this._Project_Professor_ID = value;
					this.SendPropertyChanged("Project_Professor_ID");
					this.OnProject_Professor_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Guide_Professor_ID", DbType="Int NOT NULL")]
		public int Guide_Professor_ID
		{
			get
			{
				return this._Guide_Professor_ID;
			}
			set
			{
				if ((this._Guide_Professor_ID != value))
				{
					if (this._Professor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGuide_Professor_IDChanging(value);
					this.SendPropertyChanging();
					this._Guide_Professor_ID = value;
					this.SendPropertyChanged("Guide_Professor_ID");
					this.OnGuide_Professor_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager_Professor_ID", DbType="Int NOT NULL")]
		public int Manager_Professor_ID
		{
			get
			{
				return this._Manager_Professor_ID;
			}
			set
			{
				if ((this._Manager_Professor_ID != value))
				{
					if (this._Professor2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManager_Professor_IDChanging(value);
					this.SendPropertyChanging();
					this._Manager_Professor_ID = value;
					this.SendPropertyChanged("Manager_Professor_ID");
					this.OnManager_Professor_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Juror_Professor_ID", DbType="Int")]
		public System.Nullable<int> Juror_Professor_ID
		{
			get
			{
				return this._Juror_Professor_ID;
			}
			set
			{
				if ((this._Juror_Professor_ID != value))
				{
					if (this._Professor1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJuror_Professor_IDChanging(value);
					this.SendPropertyChanging();
					this._Juror_Professor_ID = value;
					this.SendPropertyChanged("Juror_Professor_ID");
					this.OnJuror_Professor_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_Date", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Start_Date
		{
			get
			{
				return this._Start_Date;
			}
			set
			{
				if ((this._Start_Date != value))
				{
					this.OnStart_DateChanging(value);
					this.SendPropertyChanging();
					this._Start_Date = value;
					this.SendPropertyChanged("Start_Date");
					this.OnStart_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_End_Date", DbType="NVarChar(10)")]
		public string End_Date
		{
			get
			{
				return this._End_Date;
			}
			set
			{
				if ((this._End_Date != value))
				{
					this.OnEnd_DateChanging(value);
					this.SendPropertyChanging();
					this._End_Date = value;
					this.SendPropertyChanged("End_Date");
					this.OnEnd_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Guide_Grade", DbType="Float")]
		public System.Nullable<double> Guide_Grade
		{
			get
			{
				return this._Guide_Grade;
			}
			set
			{
				if ((this._Guide_Grade != value))
				{
					this.OnGuide_GradeChanging(value);
					this.SendPropertyChanging();
					this._Guide_Grade = value;
					this.SendPropertyChanged("Guide_Grade");
					this.OnGuide_GradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Juror_Grade", DbType="Float")]
		public System.Nullable<double> Juror_Grade
		{
			get
			{
				return this._Juror_Grade;
			}
			set
			{
				if ((this._Juror_Grade != value))
				{
					this.OnJuror_GradeChanging(value);
					this.SendPropertyChanging();
					this._Juror_Grade = value;
					this.SendPropertyChanged("Juror_Grade");
					this.OnJuror_GradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Project_Student_Relation", Storage="_Project_Student_Relations", ThisKey="ID", OtherKey="Project_ID")]
		public EntitySet<Project_Student_Relation> Project_Student_Relations
		{
			get
			{
				return this._Project_Student_Relations;
			}
			set
			{
				this._Project_Student_Relations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Professor_Project", Storage="_Professor", ThisKey="Guide_Professor_ID", OtherKey="ID", IsForeignKey=true)]
		public Professor GuideProfessor
		{
			get
			{
				return this._Professor.Entity;
			}
			set
			{
				Professor previousValue = this._Professor.Entity;
				if (((previousValue != value) 
							|| (this._Professor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Professor.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Professor.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._Guide_Professor_ID = value.ID;
					}
					else
					{
						this._Guide_Professor_ID = default(int);
					}
					this.SendPropertyChanged("GuideProfessor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Professor_Project1", Storage="_Professor1", ThisKey="Juror_Professor_ID", OtherKey="ID", IsForeignKey=true)]
		public Professor JurorProfessor
		{
			get
			{
				return this._Professor1.Entity;
			}
			set
			{
				Professor previousValue = this._Professor1.Entity;
				if (((previousValue != value) 
							|| (this._Professor1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Professor1.Entity = null;
						previousValue.Projects1.Remove(this);
					}
					this._Professor1.Entity = value;
					if ((value != null))
					{
						value.Projects1.Add(this);
						this._Juror_Professor_ID = value.ID;
					}
					else
					{
						this._Juror_Professor_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("JurorProfessor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Professor_Project2", Storage="_Professor2", ThisKey="Manager_Professor_ID", OtherKey="ID", IsForeignKey=true)]
		public Professor ManagerProfessor
		{
			get
			{
				return this._Professor2.Entity;
			}
			set
			{
				Professor previousValue = this._Professor2.Entity;
				if (((previousValue != value) 
							|| (this._Professor2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Professor2.Entity = null;
						previousValue.Projects2.Remove(this);
					}
					this._Professor2.Entity = value;
					if ((value != null))
					{
						value.Projects2.Add(this);
						this._Manager_Professor_ID = value.ID;
					}
					else
					{
						this._Manager_Professor_ID = default(int);
					}
					this.SendPropertyChanged("ManagerProfessor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Professor_Project3", Storage="_Professor3", ThisKey="Project_Professor_ID", OtherKey="ID", IsForeignKey=true)]
		public Professor ProjectProfessor
		{
			get
			{
				return this._Professor3.Entity;
			}
			set
			{
				Professor previousValue = this._Professor3.Entity;
				if (((previousValue != value) 
							|| (this._Professor3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Professor3.Entity = null;
						previousValue.Projects3.Remove(this);
					}
					this._Professor3.Entity = value;
					if ((value != null))
					{
						value.Projects3.Add(this);
						this._Project_Professor_ID = value.ID;
					}
					else
					{
						this._Project_Professor_ID = default(int);
					}
					this.SendPropertyChanged("ProjectProfessor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Project_Student_Relations(Project_Student_Relation entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Project_Student_Relations(Project_Student_Relation entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
}
#pragma warning restore 1591
